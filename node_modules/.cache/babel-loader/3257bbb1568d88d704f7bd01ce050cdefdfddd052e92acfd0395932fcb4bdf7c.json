{"ast":null,"code":"// Email validation\nexport const validateEmail = email => {\n  const errors = [];\n  if (!email) {\n    errors.push('Email là bắt buộc');\n  } else if (!email.trim()) {\n    errors.push('Email không được để trống');\n  } else {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(email)) {\n      errors.push('Vui lòng nhập địa chỉ email hợp lệ');\n    }\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Password validation\nexport const validatePassword = password => {\n  const errors = [];\n  let strength = 'weak';\n  if (!password) {\n    errors.push('Mật khẩu là bắt buộc');\n    return {\n      isValid: false,\n      errors,\n      strength\n    };\n  }\n  if (password.length < 8) {\n    errors.push('Mật khẩu phải có ít nhất 8 ký tự');\n  }\n  if (!/[A-Z]/.test(password)) {\n    errors.push('Mật khẩu phải chứa ít nhất một chữ cái in hoa');\n  }\n  if (!/[a-z]/.test(password)) {\n    errors.push('Mật khẩu phải chứa ít nhất một chữ cái thường');\n  }\n  if (!/[0-9]/.test(password)) {\n    errors.push('Mật khẩu phải chứa ít nhất một số');\n  }\n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n    errors.push('Mật khẩu phải chứa ít nhất một ký tự đặc biệt');\n  }\n\n  // Calculate strength\n  const strongConditions = [password.length >= 8, /[A-Z]/.test(password), /[a-z]/.test(password), /[0-9]/.test(password), /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)];\n  const metConditions = strongConditions.filter(Boolean).length;\n  if (metConditions >= 5) {\n    strength = 'strong';\n  } else if (metConditions >= 3) {\n    strength = 'medium';\n  }\n  return {\n    isValid: errors.length === 0,\n    errors,\n    strength\n  };\n};\n\n// Name validation\nexport const validateName = name => {\n  const errors = [];\n  if (!name) {\n    errors.push('Họ tên là bắt buộc');\n  } else if (!name.trim()) {\n    errors.push('Họ tên không được để trống');\n  } else if (name.trim().length < 2) {\n    errors.push('Họ tên phải có ít nhất 2 ký tự');\n  } else if (name.trim().length > 50) {\n    errors.push('Họ tên không được quá 50 ký tự');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// OTP validation\nexport const validateOTP = otp => {\n  const errors = [];\n  const otpString = otp.join('');\n  if (otpString.length !== 6) {\n    errors.push('Vui lòng nhập đầy đủ 6 chữ số');\n  } else if (!/^\\d{6}$/.test(otpString)) {\n    errors.push('Mã OTP chỉ được chứa các chữ số');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Password confirmation validation\nexport const validatePasswordConfirmation = (password, confirmPassword) => {\n  const errors = [];\n  if (!confirmPassword) {\n    errors.push('Vui lòng xác nhận mật khẩu');\n  } else if (password !== confirmPassword) {\n    errors.push('Mật khẩu xác nhận không khớp');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n// Form validation for login\nexport const validateLoginForm = (email, password) => {\n  const emailValidation = validateEmail(email);\n  const passwordValidation = validatePassword(password);\n  const allErrors = [...emailValidation.errors, ...passwordValidation.errors];\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors\n  };\n};\n\n// Form validation for registration\nexport const validateRegistrationForm = (name, email, password, confirmPassword) => {\n  const nameValidation = validateName(name);\n  const emailValidation = validateEmail(email);\n  const passwordValidation = validatePassword(password);\n  const confirmValidation = validatePasswordConfirmation(password, confirmPassword);\n  const allErrors = [...nameValidation.errors, ...emailValidation.errors, ...passwordValidation.errors, ...confirmValidation.errors];\n  return {\n    isValid: allErrors.length === 0,\n    errors: allErrors\n  };\n};\n\n// Form validation for change password\nexport const validateChangePasswordForm = (currentPassword, newPassword, confirmPassword) => {\n  const errors = [];\n  if (!currentPassword) {\n    errors.push('Mật khẩu hiện tại là bắt buộc');\n  }\n  const newPasswordValidation = validatePassword(newPassword);\n  errors.push(...newPasswordValidation.errors);\n  const confirmValidation = validatePasswordConfirmation(newPassword, confirmPassword);\n  errors.push(...confirmValidation.errors);\n  if (currentPassword && newPassword && currentPassword === newPassword) {\n    errors.push('Mật khẩu mới phải khác mật khẩu hiện tại');\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validateEmail","email","errors","push","trim","emailRegex","test","isValid","length","validatePassword","password","strength","strongConditions","metConditions","filter","Boolean","validateName","name","validateOTP","otp","otpString","join","validatePasswordConfirmation","confirmPassword","validateLoginForm","emailValidation","passwordValidation","allErrors","validateRegistrationForm","nameValidation","confirmValidation","validateChangePasswordForm","currentPassword","newPassword","newPasswordValidation"],"sources":["D:/HK2/IE303/TopCV/src/utils/validators.ts"],"sourcesContent":["export interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\nexport interface EmailValidationResult extends ValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\nexport interface PasswordValidationResult extends ValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n  strength: 'weak' | 'medium' | 'strong';\r\n}\r\n\r\n// Email validation\r\nexport const validateEmail = (email: string): EmailValidationResult => {\r\n  const errors: string[] = [];\r\n  \r\n  if (!email) {\r\n    errors.push('Email là bắt buộc');\r\n  } else if (!email.trim()) {\r\n    errors.push('Email không được để trống');\r\n  } else {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      errors.push('Vui lòng nhập địa chỉ email hợp lệ');\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Password validation\r\nexport const validatePassword = (password: string): PasswordValidationResult => {\r\n  const errors: string[] = [];\r\n  let strength: 'weak' | 'medium' | 'strong' = 'weak';\r\n  \r\n  if (!password) {\r\n    errors.push('Mật khẩu là bắt buộc');\r\n    return { isValid: false, errors, strength };\r\n  }\r\n  \r\n  if (password.length < 8) {\r\n    errors.push('Mật khẩu phải có ít nhất 8 ký tự');\r\n  }\r\n  \r\n  if (!/[A-Z]/.test(password)) {\r\n    errors.push('Mật khẩu phải chứa ít nhất một chữ cái in hoa');\r\n  }\r\n  \r\n  if (!/[a-z]/.test(password)) {\r\n    errors.push('Mật khẩu phải chứa ít nhất một chữ cái thường');\r\n  }\r\n  \r\n  if (!/[0-9]/.test(password)) {\r\n    errors.push('Mật khẩu phải chứa ít nhất một số');\r\n  }\r\n  \r\n  if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\r\n    errors.push('Mật khẩu phải chứa ít nhất một ký tự đặc biệt');\r\n  }\r\n  \r\n  // Calculate strength\r\n  const strongConditions = [\r\n    password.length >= 8,\r\n    /[A-Z]/.test(password),\r\n    /[a-z]/.test(password),\r\n    /[0-9]/.test(password),\r\n    /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)\r\n  ];\r\n  \r\n  const metConditions = strongConditions.filter(Boolean).length;\r\n  \r\n  if (metConditions >= 5) {\r\n    strength = 'strong';\r\n  } else if (metConditions >= 3) {\r\n    strength = 'medium';\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n    strength\r\n  };\r\n};\r\n\r\n// Name validation\r\nexport const validateName = (name: string): ValidationResult => {\r\n  const errors: string[] = [];\r\n  \r\n  if (!name) {\r\n    errors.push('Họ tên là bắt buộc');\r\n  } else if (!name.trim()) {\r\n    errors.push('Họ tên không được để trống');\r\n  } else if (name.trim().length < 2) {\r\n    errors.push('Họ tên phải có ít nhất 2 ký tự');\r\n  } else if (name.trim().length > 50) {\r\n    errors.push('Họ tên không được quá 50 ký tự');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// OTP validation\r\nexport const validateOTP = (otp: string[]): ValidationResult => {\r\n  const errors: string[] = [];\r\n  const otpString = otp.join('');\r\n  \r\n  if (otpString.length !== 6) {\r\n    errors.push('Vui lòng nhập đầy đủ 6 chữ số');\r\n  } else if (!/^\\d{6}$/.test(otpString)) {\r\n    errors.push('Mã OTP chỉ được chứa các chữ số');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Password confirmation validation\r\nexport const validatePasswordConfirmation = (password: string, confirmPassword: string): ValidationResult => {\r\n  const errors: string[] = [];\r\n  \r\n  if (!confirmPassword) {\r\n    errors.push('Vui lòng xác nhận mật khẩu');\r\n  } else if (password !== confirmPassword) {\r\n    errors.push('Mật khẩu xác nhận không khớp');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Form validation for login\r\nexport const validateLoginForm = (email: string, password: string): ValidationResult => {\r\n  const emailValidation = validateEmail(email);\r\n  const passwordValidation = validatePassword(password);\r\n  \r\n  const allErrors = [...emailValidation.errors, ...passwordValidation.errors];\r\n  \r\n  return {\r\n    isValid: allErrors.length === 0,\r\n    errors: allErrors\r\n  };\r\n};\r\n\r\n// Form validation for registration\r\nexport const validateRegistrationForm = (\r\n  name: string, \r\n  email: string, \r\n  password: string, \r\n  confirmPassword: string\r\n): ValidationResult => {\r\n  const nameValidation = validateName(name);\r\n  const emailValidation = validateEmail(email);\r\n  const passwordValidation = validatePassword(password);\r\n  const confirmValidation = validatePasswordConfirmation(password, confirmPassword);\r\n  \r\n  const allErrors = [\r\n    ...nameValidation.errors,\r\n    ...emailValidation.errors,\r\n    ...passwordValidation.errors,\r\n    ...confirmValidation.errors\r\n  ];\r\n  \r\n  return {\r\n    isValid: allErrors.length === 0,\r\n    errors: allErrors\r\n  };\r\n};\r\n\r\n// Form validation for change password\r\nexport const validateChangePasswordForm = (\r\n  currentPassword: string,\r\n  newPassword: string,\r\n  confirmPassword: string\r\n): ValidationResult => {\r\n  const errors: string[] = [];\r\n  \r\n  if (!currentPassword) {\r\n    errors.push('Mật khẩu hiện tại là bắt buộc');\r\n  }\r\n  \r\n  const newPasswordValidation = validatePassword(newPassword);\r\n  errors.push(...newPasswordValidation.errors);\r\n  \r\n  const confirmValidation = validatePasswordConfirmation(newPassword, confirmPassword);\r\n  errors.push(...confirmValidation.errors);\r\n  \r\n  if (currentPassword && newPassword && currentPassword === newPassword) {\r\n    errors.push('Mật khẩu mới phải khác mật khẩu hiện tại');\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n}; "],"mappings":"AAgBA;AACA,OAAO,MAAMA,aAAa,GAAIC,KAAa,IAA4B;EACrE,MAAMC,MAAgB,GAAG,EAAE;EAE3B,IAAI,CAACD,KAAK,EAAE;IACVC,MAAM,CAACC,IAAI,CAAC,mBAAmB,CAAC;EAClC,CAAC,MAAM,IAAI,CAACF,KAAK,CAACG,IAAI,CAAC,CAAC,EAAE;IACxBF,MAAM,CAACC,IAAI,CAAC,2BAA2B,CAAC;EAC1C,CAAC,MAAM;IACL,MAAME,UAAU,GAAG,4BAA4B;IAC/C,IAAI,CAACA,UAAU,CAACC,IAAI,CAACL,KAAK,CAAC,EAAE;MAC3BC,MAAM,CAACC,IAAI,CAAC,oCAAoC,CAAC;IACnD;EACF;EAEA,OAAO;IACLI,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMO,gBAAgB,GAAIC,QAAgB,IAA+B;EAC9E,MAAMR,MAAgB,GAAG,EAAE;EAC3B,IAAIS,QAAsC,GAAG,MAAM;EAEnD,IAAI,CAACD,QAAQ,EAAE;IACbR,MAAM,CAACC,IAAI,CAAC,sBAAsB,CAAC;IACnC,OAAO;MAAEI,OAAO,EAAE,KAAK;MAAEL,MAAM;MAAES;IAAS,CAAC;EAC7C;EAEA,IAAID,QAAQ,CAACF,MAAM,GAAG,CAAC,EAAE;IACvBN,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAI,CAAC,OAAO,CAACG,IAAI,CAACI,QAAQ,CAAC,EAAE;IAC3BR,MAAM,CAACC,IAAI,CAAC,+CAA+C,CAAC;EAC9D;EAEA,IAAI,CAAC,OAAO,CAACG,IAAI,CAACI,QAAQ,CAAC,EAAE;IAC3BR,MAAM,CAACC,IAAI,CAAC,+CAA+C,CAAC;EAC9D;EAEA,IAAI,CAAC,OAAO,CAACG,IAAI,CAACI,QAAQ,CAAC,EAAE;IAC3BR,MAAM,CAACC,IAAI,CAAC,mCAAmC,CAAC;EAClD;EAEA,IAAI,CAAC,uCAAuC,CAACG,IAAI,CAACI,QAAQ,CAAC,EAAE;IAC3DR,MAAM,CAACC,IAAI,CAAC,+CAA+C,CAAC;EAC9D;;EAEA;EACA,MAAMS,gBAAgB,GAAG,CACvBF,QAAQ,CAACF,MAAM,IAAI,CAAC,EACpB,OAAO,CAACF,IAAI,CAACI,QAAQ,CAAC,EACtB,OAAO,CAACJ,IAAI,CAACI,QAAQ,CAAC,EACtB,OAAO,CAACJ,IAAI,CAACI,QAAQ,CAAC,EACtB,uCAAuC,CAACJ,IAAI,CAACI,QAAQ,CAAC,CACvD;EAED,MAAMG,aAAa,GAAGD,gBAAgB,CAACE,MAAM,CAACC,OAAO,CAAC,CAACP,MAAM;EAE7D,IAAIK,aAAa,IAAI,CAAC,EAAE;IACtBF,QAAQ,GAAG,QAAQ;EACrB,CAAC,MAAM,IAAIE,aAAa,IAAI,CAAC,EAAE;IAC7BF,QAAQ,GAAG,QAAQ;EACrB;EAEA,OAAO;IACLJ,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN,MAAM;IACNS;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMK,YAAY,GAAIC,IAAY,IAAuB;EAC9D,MAAMf,MAAgB,GAAG,EAAE;EAE3B,IAAI,CAACe,IAAI,EAAE;IACTf,MAAM,CAACC,IAAI,CAAC,oBAAoB,CAAC;EACnC,CAAC,MAAM,IAAI,CAACc,IAAI,CAACb,IAAI,CAAC,CAAC,EAAE;IACvBF,MAAM,CAACC,IAAI,CAAC,4BAA4B,CAAC;EAC3C,CAAC,MAAM,IAAIc,IAAI,CAACb,IAAI,CAAC,CAAC,CAACI,MAAM,GAAG,CAAC,EAAE;IACjCN,MAAM,CAACC,IAAI,CAAC,gCAAgC,CAAC;EAC/C,CAAC,MAAM,IAAIc,IAAI,CAACb,IAAI,CAAC,CAAC,CAACI,MAAM,GAAG,EAAE,EAAE;IAClCN,MAAM,CAACC,IAAI,CAAC,gCAAgC,CAAC;EAC/C;EAEA,OAAO;IACLI,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMgB,WAAW,GAAIC,GAAa,IAAuB;EAC9D,MAAMjB,MAAgB,GAAG,EAAE;EAC3B,MAAMkB,SAAS,GAAGD,GAAG,CAACE,IAAI,CAAC,EAAE,CAAC;EAE9B,IAAID,SAAS,CAACZ,MAAM,KAAK,CAAC,EAAE;IAC1BN,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C,CAAC,MAAM,IAAI,CAAC,SAAS,CAACG,IAAI,CAACc,SAAS,CAAC,EAAE;IACrClB,MAAM,CAACC,IAAI,CAAC,iCAAiC,CAAC;EAChD;EAEA,OAAO;IACLI,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMoB,4BAA4B,GAAGA,CAACZ,QAAgB,EAAEa,eAAuB,KAAuB;EAC3G,MAAMrB,MAAgB,GAAG,EAAE;EAE3B,IAAI,CAACqB,eAAe,EAAE;IACpBrB,MAAM,CAACC,IAAI,CAAC,4BAA4B,CAAC;EAC3C,CAAC,MAAM,IAAIO,QAAQ,KAAKa,eAAe,EAAE;IACvCrB,MAAM,CAACC,IAAI,CAAC,8BAA8B,CAAC;EAC7C;EAEA,OAAO;IACLI,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMsB,iBAAiB,GAAGA,CAACvB,KAAa,EAAES,QAAgB,KAAuB;EACtF,MAAMe,eAAe,GAAGzB,aAAa,CAACC,KAAK,CAAC;EAC5C,MAAMyB,kBAAkB,GAAGjB,gBAAgB,CAACC,QAAQ,CAAC;EAErD,MAAMiB,SAAS,GAAG,CAAC,GAAGF,eAAe,CAACvB,MAAM,EAAE,GAAGwB,kBAAkB,CAACxB,MAAM,CAAC;EAE3E,OAAO;IACLK,OAAO,EAAEoB,SAAS,CAACnB,MAAM,KAAK,CAAC;IAC/BN,MAAM,EAAEyB;EACV,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,wBAAwB,GAAGA,CACtCX,IAAY,EACZhB,KAAa,EACbS,QAAgB,EAChBa,eAAuB,KACF;EACrB,MAAMM,cAAc,GAAGb,YAAY,CAACC,IAAI,CAAC;EACzC,MAAMQ,eAAe,GAAGzB,aAAa,CAACC,KAAK,CAAC;EAC5C,MAAMyB,kBAAkB,GAAGjB,gBAAgB,CAACC,QAAQ,CAAC;EACrD,MAAMoB,iBAAiB,GAAGR,4BAA4B,CAACZ,QAAQ,EAAEa,eAAe,CAAC;EAEjF,MAAMI,SAAS,GAAG,CAChB,GAAGE,cAAc,CAAC3B,MAAM,EACxB,GAAGuB,eAAe,CAACvB,MAAM,EACzB,GAAGwB,kBAAkB,CAACxB,MAAM,EAC5B,GAAG4B,iBAAiB,CAAC5B,MAAM,CAC5B;EAED,OAAO;IACLK,OAAO,EAAEoB,SAAS,CAACnB,MAAM,KAAK,CAAC;IAC/BN,MAAM,EAAEyB;EACV,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMI,0BAA0B,GAAGA,CACxCC,eAAuB,EACvBC,WAAmB,EACnBV,eAAuB,KACF;EACrB,MAAMrB,MAAgB,GAAG,EAAE;EAE3B,IAAI,CAAC8B,eAAe,EAAE;IACpB9B,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C;EAEA,MAAM+B,qBAAqB,GAAGzB,gBAAgB,CAACwB,WAAW,CAAC;EAC3D/B,MAAM,CAACC,IAAI,CAAC,GAAG+B,qBAAqB,CAAChC,MAAM,CAAC;EAE5C,MAAM4B,iBAAiB,GAAGR,4BAA4B,CAACW,WAAW,EAAEV,eAAe,CAAC;EACpFrB,MAAM,CAACC,IAAI,CAAC,GAAG2B,iBAAiB,CAAC5B,MAAM,CAAC;EAExC,IAAI8B,eAAe,IAAIC,WAAW,IAAID,eAAe,KAAKC,WAAW,EAAE;IACrE/B,MAAM,CAACC,IAAI,CAAC,0CAA0C,CAAC;EACzD;EAEA,OAAO;IACLI,OAAO,EAAEL,MAAM,CAACM,MAAM,KAAK,CAAC;IAC5BN;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}