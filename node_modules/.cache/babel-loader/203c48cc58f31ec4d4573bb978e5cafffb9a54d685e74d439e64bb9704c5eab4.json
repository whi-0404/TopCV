{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst authService = {\n  async login(email, password) {\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    return response.data;\n  },\n  async register(name, email, password) {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      name,\n      email,\n      password\n    });\n    return response.data;\n  },\n  async logout() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      await axios.post(`${API_URL}/auth/logout`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n  },\n  async getCurrentUser() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      throw new Error('No token found');\n    }\n    const response = await axios.get(`${API_URL}/auth/me`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  }\n};\nexport { authService };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","authService","login","email","password","response","post","data","register","name","logout","token","localStorage","getItem","headers","Authorization","getCurrentUser","Error","get"],"sources":["D:/Workspace/job-search-website/src/services/authService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n}\r\n\r\ninterface AuthResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\nconst authService = {\r\n  async login(email: string, password: string): Promise<AuthResponse> {\r\n    const response = await axios.post(`${API_URL}/auth/login`, { email, password });\r\n    return response.data;\r\n  },\r\n\r\n  async register(name: string, email: string, password: string): Promise<AuthResponse> {\r\n    const response = await axios.post(`${API_URL}/auth/register`, { name, email, password });\r\n    return response.data;\r\n  },\r\n\r\n  async logout(): Promise<void> {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      await axios.post(`${API_URL}/auth/logout`, {}, {\r\n        headers: { Authorization: `Bearer ${token}` }\r\n      });\r\n    }\r\n  },\r\n\r\n  async getCurrentUser(): Promise<User> {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      throw new Error('No token found');\r\n    }\r\n\r\n    const response = await axios.get(`${API_URL}/auth/me`, {\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport { authService }; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAc5E,MAAMC,WAAW,GAAG;EAClB,MAAMC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAAyB;IAClE,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,aAAa,EAAE;MAAEM,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC/E,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,QAAQA,CAACC,IAAY,EAAEN,KAAa,EAAEC,QAAgB,EAAyB;IACnF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,gBAAgB,EAAE;MAAEY,IAAI;MAAEN,KAAK;MAAEC;IAAS,CAAC,CAAC;IACxF,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMG,MAAMA,CAAA,EAAkB;IAC5B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,MAAMf,KAAK,CAACU,IAAI,CAAC,GAAGT,OAAO,cAAc,EAAE,CAAC,CAAC,EAAE;QAC7CiB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUJ,KAAK;QAAG;MAC9C,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMK,cAAcA,CAAA,EAAkB;IACpC,MAAML,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACV,MAAM,IAAIM,KAAK,CAAC,gBAAgB,CAAC;IACnC;IAEA,MAAMZ,QAAQ,GAAG,MAAMT,KAAK,CAACsB,GAAG,CAAC,GAAGrB,OAAO,UAAU,EAAE;MACrDiB,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUJ,KAAK;MAAG;IAC9C,CAAC,CAAC;IACF,OAAON,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC;AAED,SAASN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}