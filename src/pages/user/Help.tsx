import React, { useState } from 'react';

interface FAQ {
  id: number;
  question: string;
  answer: string;
  category: string;
}

const Help: React.FC = () => {
  const [activeCategory, setActiveCategory] = useState('general');
  const [expandedFaq, setExpandedFaq] = useState<number | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const categories = [
    { id: 'general', name: 'T·ªïng quan', icon: 'üè†' },
    { id: 'account', name: 'T√†i kho·∫£n', icon: 'üë§' },
    { id: 'jobs', name: 'Vi·ªác l√†m', icon: 'üíº' },
    { id: 'profile', name: 'H·ªì s∆°', icon: 'üìù' },
    { id: 'payment', name: 'Thanh to√°n', icon: 'üí≥' },
  ];

  const faqs: FAQ[] = [
    {
      id: 1,
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o t√†i kho·∫£n?',
      answer: 'B·∫°n c√≥ th·ªÉ t·∫°o t√†i kho·∫£n b·∫±ng c√°ch nh·∫•p v√†o n√∫t "ƒêƒÉng k√Ω" ·ªü g√≥c tr√™n b√™n ph·∫£i c·ªßa trang web. ƒêi·ªÅn th√¥ng tin c·∫ßn thi·∫øt v√† x√°c nh·∫≠n email ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.',
      category: 'account'
    },
    {
      id: 2,
      question: 'T√¥i qu√™n m·∫≠t kh·∫©u, l√†m sao ƒë·ªÉ kh√¥i ph·ª•c?',
      answer: 'Nh·∫•p v√†o "Qu√™n m·∫≠t kh·∫©u" ·ªü trang ƒëƒÉng nh·∫≠p. Nh·∫≠p email c·ªßa b·∫°n, ch√∫ng t√¥i s·∫Ω g·ª≠i li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa b·∫°n.',
      category: 'account'
    },
    {
      id: 3,
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ t√¨m ki·∫øm vi·ªác l√†m ph√π h·ª£p?',
      answer: 'S·ª≠ d·ª•ng thanh t√¨m ki·∫øm tr√™n trang ch·ªß. B·∫°n c√≥ th·ªÉ t√¨m theo t·ª´ kh√≥a, ƒë·ªãa ƒëi·ªÉm, l∆∞∆°ng ho·∫∑c s·ª≠ d·ª•ng b·ªô l·ªçc n√¢ng cao ƒë·ªÉ t√¨m vi·ªác l√†m ph√π h·ª£p nh·∫•t.',
      category: 'jobs'
    },
    {
      id: 4,
      question: 'C√°ch ·ª©ng tuy·ªÉn v√†o m·ªôt c√¥ng vi·ªác?',
      answer: 'Nh·∫•p v√†o c√¥ng vi·ªác b·∫°n quan t√¢m, ƒë·ªçc chi ti·∫øt v√† nh·∫•p "·ª®ng tuy·ªÉn ngay". B·∫°n c√≥ th·ªÉ g·ª≠i CV c√≥ s·∫µn ho·∫∑c t·∫£i l√™n CV m·ªõi.',
      category: 'jobs'
    },
    {
      id: 5,
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ c·∫≠p nh·∫≠t h·ªì s∆°?',
      answer: 'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n, v√†o ph·∫ßn "H·ªì s∆°" trong dashboard. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin c√° nh√¢n, kinh nghi·ªám l√†m vi·ªác, h·ªçc v·∫•n v√† k·ªπ nƒÉng.',
      category: 'profile'
    },
    {
      id: 6,
      question: 'TopCV c√≥ mi·ªÖn ph√≠ kh√¥ng?',
      answer: 'TopCV cung c·∫•p nhi·ªÅu t√≠nh nƒÉng mi·ªÖn ph√≠ cho ng∆∞·ªùi t√¨m vi·ªác. M·ªôt s·ªë t√≠nh nƒÉng n√¢ng cao c√≥ th·ªÉ y√™u c·∫ßu g√≥i premium.',
      category: 'general'
    },
    {
      id: 7,
      question: 'L√†m th·∫ø n√†o ƒë·ªÉ li√™n h·ªá h·ªó tr·ª£?',
      answer: 'B·∫°n c√≥ th·ªÉ li√™n h·ªá qua email support@topcv.vn, hotline 1900-xxxx ho·∫∑c s·ª≠ d·ª•ng chat tr·ª±c tuy·∫øn tr√™n website.',
      category: 'general'
    },
    {
      id: 8,
      question: 'C√°ch thanh to√°n cho g√≥i premium?',
      answer: 'Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n qua th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠ v√† c·ªïng thanh to√°n online.',
      category: 'payment'
    }
  ];

  const filteredFaqs = faqs.filter(faq => {
    const matchesCategory = activeCategory === 'general' || faq.category === activeCategory;
    const matchesSearch = searchTerm === '' || 
      faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
      faq.answer.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const toggleFaq = (id: number) => {
    setExpandedFaq(expandedFaq === id ? null : id);
  };

  return (
    <div>
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-2">Trung t√¢m tr·ª£ gi√∫p</h1>
        <p className="text-gray-600">T√¨m c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p</p>
      </div>

      {/* Search Bar */}
      <div className="mb-6">
        <div className="relative max-w-md">
          <input
            type="text"
            placeholder="T√¨m ki·∫øm c√¢u h·ªèi..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          />
          <svg className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>

      {/* Contact Cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div className="bg-white rounded-lg shadow-sm p-6 text-center">
          <div className="text-3xl mb-3">üìû</div>
          <h3 className="font-semibold text-gray-900 mb-2">Hotline</h3>
          <p className="text-gray-600 text-sm mb-3">H·ªó tr·ª£ 24/7</p>
          <p className="text-blue-600 font-medium">1900-xxxx</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 text-center">
          <div className="text-3xl mb-3">‚úâÔ∏è</div>
          <h3 className="font-semibold text-gray-900 mb-2">Email</h3>
          <p className="text-gray-600 text-sm mb-3">Ph·∫£n h·ªìi trong 24h</p>
          <p className="text-blue-600 font-medium">support@topcv.vn</p>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm p-6 text-center">
          <div className="text-3xl mb-3">üí¨</div>
          <h3 className="font-semibold text-gray-900 mb-2">Chat tr·ª±c tuy·∫øn</h3>
          <p className="text-gray-600 text-sm mb-3">H·ªó tr·ª£ t·ª©c th√¨</p>
          <button className="text-blue-600 font-medium hover:text-blue-700">
            B·∫Øt ƒë·∫ßu chat
          </button>
        </div>
      </div>

      <div className="flex gap-6">
        {/* Categories */}
        <div className="w-64 flex-shrink-0">
          <div className="bg-white rounded-lg shadow-sm p-4">
            <h3 className="font-semibold text-gray-900 mb-4">Danh m·ª•c</h3>
            <div className="space-y-2">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setActiveCategory(category.id)}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                    activeCategory === category.id
                      ? 'bg-blue-50 text-blue-700 border border-blue-200'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <span className="text-lg">{category.icon}</span>
                  <span className="text-sm font-medium">{category.name}</span>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* FAQ Content */}
        <div className="flex-1">
          <div className="bg-white rounded-lg shadow-sm">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">
                C√¢u h·ªèi th∆∞·ªùng g·∫∑p
                {activeCategory !== 'general' && (
                  <span className="text-sm font-normal text-gray-500 ml-2">
                    - {categories.find(c => c.id === activeCategory)?.name}
                  </span>
                )}
              </h2>
              <p className="text-sm text-gray-600 mt-1">
                {filteredFaqs.length} c√¢u h·ªèi ƒë∆∞·ª£c t√¨m th·∫•y
              </p>
            </div>

            <div className="divide-y divide-gray-200">
              {filteredFaqs.length === 0 ? (
                <div className="p-6 text-center">
                  <div className="text-4xl mb-3">üîç</div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi</h3>
                  <p className="text-gray-600">Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c ch·ªçn danh m·ª•c kh√°c</p>
                </div>
              ) : (
                filteredFaqs.map((faq) => (
                  <div key={faq.id} className="p-6">
                    <button
                      onClick={() => toggleFaq(faq.id)}
                      className="w-full flex items-center justify-between text-left"
                    >
                      <h3 className="text-md font-medium text-gray-900 pr-4">
                        {faq.question}
                      </h3>
                      <svg
                        className={`w-5 h-5 text-gray-500 transition-transform ${
                          expandedFaq === faq.id ? 'rotate-180' : ''
                        }`}
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                    {expandedFaq === faq.id && (
                      <div className="mt-4 text-sm text-gray-600 leading-relaxed">
                        {faq.answer}
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Contact Form */}
          <div className="bg-white rounded-lg shadow-sm mt-6 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi?
            </h3>
            <p className="text-gray-600 mb-4">
              G·ª≠i c√¢u h·ªèi cho ch√∫ng t√¥i v√† nh·∫≠n ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.
            </p>
            <form className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    H·ªç v√† t√™n
                  </label>
                  <input
                    type="text"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ch·ªß ƒë·ªÅ
                </label>
                <input
                  type="text"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  N·ªôi dung c√¢u h·ªèi
                </label>
                <textarea
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
                />
              </div>
              <button
                type="submit"
                className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                G·ª≠i c√¢u h·ªèi
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Help; 