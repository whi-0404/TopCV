import React, { useState, useEffect } from 'react';
import {
  XMarkIcon,
  DocumentTextIcon,
  PaperClipIcon,
  ArrowUpTrayIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon
} from '@heroicons/react/24/outline';
import { resumeApi, type ResumeResponse, isValidResumeFile, formatFileSize, getFileIcon } from '../../services/api';
import { applicationApi } from '../../services/api/applicationApi';
import { aiRecommendationApi } from '../../services/api/aiRecommendationApi';
import { useAuth } from '../../contexts/AuthContext';

interface ApplyJobModalProps {
  isOpen: boolean;
  onClose: () => void;
  jobId: number;
  jobTitle: string;
  companyName: string;
  onSuccess?: () => void;
}

const ApplyJobModal: React.FC<ApplyJobModalProps> = ({
  isOpen,
  onClose,
  jobId,
  jobTitle,
  companyName,
  onSuccess
}) => {
  const { user } = useAuth();
  const [resumes, setResumes] = useState<ResumeResponse[]>([]);
  const [selectedResumeId, setSelectedResumeId] = useState<number | null>(null);
  const [coverLetter, setCoverLetter] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [uploadError, setUploadError] = useState('');
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);

  useEffect(() => {
    if (isOpen) {
      fetchMyResumes();
      // Reset form
      setSelectedResumeId(null);
      setCoverLetter('');
      setError('');
      setUploadError('');
      setUploadedFile(null);
    }
  }, [isOpen]);

  const fetchMyResumes = async () => {
    setLoading(true);
    try {
      const response = await resumeApi.getMyResumes();
      setResumes(response.result);
      
      // Auto-select first resume if available
      if (response.result.length > 0) {
        setSelectedResumeId(response.result[0].resumeId);
      }
    } catch (error: any) {
      console.error('Error fetching resumes:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch CV. Vui l√≤ng th·ª≠ l·∫°i.');
    }
    setLoading(false);
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file
    const validation = isValidResumeFile(file);
    if (!validation.valid) {
      setUploadError(validation.error || 'File kh√¥ng h·ª£p l·ªá');
      return;
    }

    setIsUploading(true);
    setUploadError('');

    try {
      // L∆∞u file ƒë·ªÉ d√πng cho AI screening
      setUploadedFile(file);
      
      const response = await resumeApi.uploadResume(file);
      
      // Refresh resumes list
      await fetchMyResumes();
      
      // Auto-select newly uploaded resume
      setSelectedResumeId(response.result.resumeId);
      
      // Clear file input
      event.target.value = '';
    } catch (error: any) {
      console.error('Error uploading resume:', error);
      setUploadError(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i l√™n CV. Vui l√≤ng th·ª≠ l·∫°i.');
      setUploadedFile(null);
    }
    setIsUploading(false);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedResumeId && !uploadedFile) {
      setError('Vui l√≤ng ch·ªçn CV c√≥ s·∫µn ho·∫∑c upload CV m·ªõi ƒë·ªÉ ·ª©ng tuy·ªÉn');
      return;
    }

    if (!user?.id) {
      setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ·ª©ng tuy·ªÉn');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      let cvFile: File;
      
      // B∆Ø·ªöC 1: L·∫•y file CV
      if (uploadedFile) {
        // User v·ª´a upload file m·ªõi
        cvFile = uploadedFile;
      } else if (selectedResumeId) {
        // User ch·ªçn CV c√≥ s·∫µn ‚Üí Download ƒë·ªÉ c√≥ AI screening
        console.log('üîÑ Downloading selected resume for AI screening:', selectedResumeId);
        const selectedResume = resumes.find(r => r.resumeId === selectedResumeId);
        const fileName = selectedResume?.originalFileName || `resume_${selectedResumeId}.pdf`;
        
        try {
          // Download CV ƒë·ªÉ g·ª≠i qua AI screening API - d√πng API c≈©
          cvFile = await resumeApi.downloadResumeAsFile(selectedResumeId, fileName);
          console.log('‚úÖ Downloaded CV for AI screening:', fileName);
        } catch (error) {
          console.error('‚ùå Download failed:', error);
          throw new Error('Kh√¥ng th·ªÉ t·∫£i CV ƒë·ªÉ x·ª≠ l√Ω AI screening. Vui l√≤ng th·ª≠ l·∫°i.');
        }
      } else {
        setError('Vui l√≤ng ch·ªçn CV ƒë·ªÉ ·ª©ng tuy·ªÉn');
        return;
      }
      
      console.log('üîç Applying job for:', {
        jobId,
        userId: user.id,
        fileName: cvFile.name,
        fileSize: cvFile.size,
        fileType: cvFile.type,
        coverLetterLength: coverLetter.length
      });
      
      // Debug authentication
      console.log('üîç Current user:', user);
      console.log('üîç User role:', user.role);
      console.log('üîç Auth token (token):', !!localStorage.getItem('token'));
      console.log('üîç Auth token (access_token):', !!localStorage.getItem('access_token'));
      
      // Validate jobId
      if (!jobId || jobId <= 0) {
        throw new Error('Invalid jobId: ' + jobId);
      }
      
      // Validate user
      if (!user?.id) {
        throw new Error('User not authenticated');
      }
      
      // Validate file
      if (!cvFile || cvFile.size === 0) {
        throw new Error('Invalid file: ' + cvFile.name);
      }
      
      // B∆Ø·ªöC 2: G·ª≠i h·ªì s∆° ·ª©ng tuy·ªÉn
      await aiRecommendationApi.applyJobWithScreening(
        cvFile,
        jobId, 
        user.id,
        coverLetter.trim() || undefined
      );
      
      // B∆Ø·ªöC 3: Th√¥ng b√°o th√†nh c√¥ng
      onSuccess?.();
      onClose();
      alert('‚úÖ ·ª®ng tuy·ªÉn th√†nh c√¥ng! Nh√† tuy·ªÉn d·ª•ng s·∫Ω xem x√©t h·ªì s∆° c·ªßa b·∫°n.');
      
    } catch (error: any) {
      console.error('Error applying for job:', error);
      const errorMessage = error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi ·ª©ng tuy·ªÉn. Vui l√≤ng th·ª≠ l·∫°i.';
      setError(errorMessage);
    }
    
    setIsSubmitting(false);
  };

  const handleDeleteResume = async (resumeId: number) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a CV n√†y?')) return;

    try {
      await resumeApi.deleteResume(resumeId);
      
      // Refresh resumes list
      await fetchMyResumes();
      
      // Clear selection if deleted resume was selected
      if (selectedResumeId === resumeId) {
        setSelectedResumeId(null);
        setUploadedFile(null);
      }
    } catch (error: any) {
      console.error('Error deleting resume:', error);
      alert('Kh√¥ng th·ªÉ x√≥a CV. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">·ª®ng tuy·ªÉn vi·ªác l√†m</h2>
            <p className="text-sm text-gray-600 mt-1">
              <span className="font-medium">{jobTitle}</span> t·∫°i <span className="font-medium">{companyName}</span>
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6">
          {/* CV Selection */}
          <div className="mb-6">
            <div className="flex items-center justify-between mb-4">
              <label className="block text-sm font-medium text-gray-700">
                Ch·ªçn CV ƒë·ªÉ ·ª©ng tuy·ªÉn *
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="file"
                  accept=".pdf,.doc,.docx"
                  onChange={handleFileUpload}
                  className="hidden"
                  id="resume-upload"
                  disabled={isUploading}
                />
                <label
                  htmlFor="resume-upload"
                  className={`flex items-center space-x-2 px-3 py-2 border border-emerald-300 rounded-lg text-sm font-medium transition-colors cursor-pointer ${
                    isUploading 
                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                      : 'text-emerald-700 hover:bg-emerald-50'
                  }`}
                >
                  <ArrowUpTrayIcon className="h-4 w-4" />
                  <span>{isUploading ? 'ƒêang t·∫£i l√™n...' : 'T·∫£i CV m·ªõi'}</span>
                </label>
              </div>
            </div>

            {uploadError && (
              <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-start space-x-2">
                <ExclamationTriangleIcon className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-red-600">{uploadError}</p>
              </div>
            )}

            {loading ? (
              <div className="text-center py-8">
                <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
                <p className="text-sm text-gray-600 mt-2">ƒêang t·∫£i danh s√°ch CV...</p>
              </div>
            ) : (
                                            <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                 <div className="flex items-start space-x-2">
                   <svg className="h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                     <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                   </svg>
                   <div>
                     <p className="text-sm font-medium text-blue-900">H∆∞·ªõng d·∫´n ·ª©ng tuy·ªÉn</p>
                     <p className="text-xs text-blue-700 mt-1">
                       B·∫°n c√≥ th·ªÉ ch·ªçn CV c√≥ s·∫µn ho·∫∑c upload CV m·ªõi t·ª´ m√°y t√≠nh. Nh√† tuy·ªÉn d·ª•ng s·∫Ω xem x√©t h·ªì s∆° c·ªßa b·∫°n v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.
                     </p>
                   </div>
                 </div>
               </div>
             )}
             
             {/* Show uploaded file n·∫øu c√≥ */}
             {uploadedFile && (
               <div className="mb-4 border border-emerald-500 bg-emerald-50 rounded-lg p-4">
                 <div className="flex items-center justify-between">
                   <div className="flex items-center space-x-3">
                     <span className="text-2xl">üìÑ</span>
                     <div>
                       <p className="font-medium text-gray-900 text-sm">
                         {uploadedFile.name}
                         <span className="ml-2 px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                           File m·ªõi - S·∫µn s√†ng ·ª©ng tuy·ªÉn
                         </span>
                       </p>
                       <p className="text-xs text-gray-500">File CV v·ª´a ƒë∆∞·ª£c upload</p>
                     </div>
                   </div>
                 </div>
               </div>
             )}
             
             {resumes.length === 0 ? (
               <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-lg">
                 <DocumentTextIcon className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                 <p className="text-sm text-gray-600 mb-2">B·∫°n ch∆∞a c√≥ CV n√†o</p>
                 <p className="text-xs text-gray-500">T·∫£i l√™n CV ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu ·ª©ng tuy·ªÉn</p>
               </div>
             ) : (
              <div className="space-y-3">
                {resumes.map((resume) => (
                  <div
                    key={resume.resumeId}
                    className={`border rounded-lg p-4 cursor-pointer transition-colors ${
                      selectedResumeId === resume.resumeId
                        ? 'border-emerald-500 bg-emerald-50'
                        : 'border-gray-200 hover:border-emerald-300'
                    }`}
                    onClick={() => {
                      setSelectedResumeId(resume.resumeId);
                      // Clear uploaded file khi ch·ªçn CV c√≥ s·∫µn
                      if (uploadedFile) {
                        setUploadedFile(null);
                      }
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="flex items-center space-x-2">
                          <span className="text-2xl">{getFileIcon(resume.originalFileName)}</span>
                          <div>
                            <p className="font-medium text-gray-900 text-sm">
                              {resume.originalFileName}
                            </p>
                            <p className="text-xs text-gray-500">
                              T·∫£i l√™n: {new Date(resume.createdAt).toLocaleDateString('vi-VN')}
                            </p>
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        {selectedResumeId === resume.resumeId && (
                          <CheckCircleIcon className="h-5 w-5 text-emerald-600" />
                        )}
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteResume(resume.resumeId);
                          }}
                          className="text-red-600 hover:text-red-800 text-sm font-medium"
                        >
                          X√≥a
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Cover Letter */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Th∆∞ xin vi·ªác (t√πy ch·ªçn)
            </label>
            <textarea
              value={coverLetter}
              onChange={(e) => setCoverLetter(e.target.value)}
              rows={4}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 outline-none"
              placeholder="Gi·ªõi thi·ªáu b·∫£n th√¢n v√† l√Ω do b·∫°n ph√π h·ª£p v·ªõi v·ªã tr√≠ n√†y..."
            />
            <p className="text-xs text-gray-500 mt-1">
              Th∆∞ xin vi·ªác gi√∫p nh√† tuy·ªÉn d·ª•ng hi·ªÉu r√µ h∆°n v·ªÅ b·∫°n v√† ƒë·ªông c∆° ·ª©ng tuy·ªÉn
            </p>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg flex items-start space-x-2">
              <ExclamationTriangleIcon className="h-5 w-5 text-red-600 mt-0.5 flex-shrink-0" />
              <p className="text-sm text-red-600">{error}</p>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              disabled={isSubmitting}
            >
              H·ªßy
            </button>
            <button
              type="submit"
              disabled={(!selectedResumeId && !uploadedFile) || isSubmitting}
              className="px-6 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSubmitting ? 'ƒêang x·ª≠ l√Ω ·ª©ng tuy·ªÉn...' : '·ª®ng tuy·ªÉn ngay'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ApplyJobModal; 