import React, { useState, useEffect } from 'react';
import userService, { 
  UserProfile as ApiUserProfile, 
  UserUpdateRequest
} from '../../services/userService';

const Profile: React.FC = () => {
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('personal');
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string>('');
  const [successMessage, setSuccessMessage] = useState<string>('');
  const [apiProfileData, setApiProfileData] = useState<ApiUserProfile | null>(null);
  
  // Profile form data
  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
    address: '',
    avatar: '/images/default-avatar.png'
  });

  // Fetch user profile data on component mount
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        setIsLoading(true);
        
        const profile = await userService.getMyProfile();
        setApiProfileData(profile);
        
        // Update form data with API data
        setFormData({
          fullName: profile.fullname || '',
          email: profile.email || '',
          phone: profile.phone || '',
          dateOfBirth: profile.dob ? profile.dob.split('T')[0] : '',
          address: profile.address || '',
          avatar: userService.getAvatarUrl(profile.avt),
        });
        
        setError('');
      } catch (err: any) {
        console.error('Failed to fetch profile:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin profile. Vui l√≤ng th·ª≠ l·∫°i.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchProfile();
  }, []);

  const tabs = [
    { id: 'personal', name: 'Trang c√° nh√¢n', icon: 'üë§' },
    { id: 'contact', name: 'Th√¥ng tin li√™n h·ªá', icon: 'üìû' },
    { id: 'about', name: 'Gi·ªõi thi·ªáu b·∫£n th√¢n', icon: 'üìù' },
    { id: 'experience', name: 'Kinh nghi·ªám', icon: 'üíº' },
    { id: 'education', name: 'H·ªçc v·∫•n', icon: 'üéì' },
    { id: 'skills', name: 'K·ªπ nƒÉng', icon: 'üîß' },
    { id: 'languages', name: 'Ng√¥n ng·ªØ', icon: 'üåê' },
  ];

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSave = async () => {
    if (!apiProfileData) return;
    
    try {
      setIsSaving(true);
      
      const updateData: UserUpdateRequest = {
        userName: apiProfileData.userName, // Keep existing username
        fullName: formData.fullName,
        phone: formData.phone,
        address: formData.address,
        dob: formData.dateOfBirth,
      };
      
      const updatedProfile = await userService.updateMyProfile(updateData);
      setApiProfileData(updatedProfile);
      
      setIsEditing(false);
      setError('');
      setSuccessMessage('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!');
      
      // Clear success message after 3 seconds
      setTimeout(() => setSuccessMessage(''), 3000);
      
    } catch (err: any) {
      console.error('Failed to update profile:', err);
      setError('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSaving(false);
    }
  };

  const renderPersonalInfo = () => (
    <div className="bg-white rounded-lg shadow-sm">
      {/* Header section with avatar */}
      <div className="relative bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 h-32 rounded-t-lg">
        <div className="absolute -bottom-12 left-6">
          <div className="relative">
            <img
              src={formData.avatar}
              alt="Avatar"
              className="w-24 h-24 rounded-full border-4 border-white object-cover bg-white"
            />
            {isEditing && (
              <button className="absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full hover:bg-blue-700 shadow-lg">
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </button>
            )}
          </div>
        </div>
        
        {/* Edit button */}
        <div className="absolute top-4 right-4">
          {!isEditing ? (
            <button
              onClick={() => setIsEditing(true)}
              className="bg-white text-gray-700 px-4 py-2 rounded-lg shadow-sm hover:bg-gray-50 flex items-center space-x-2"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
              <span>Ch·ªânh s·ª≠a</span>
            </button>
          ) : (
            <div className="flex space-x-2">
              <button
                onClick={() => setIsEditing(false)}
                className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600"
              >
                H·ªßy
              </button>
              <button
                onClick={handleSave}
                disabled={isSaving}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {isSaving ? 'ƒêang l∆∞u...' : 'L∆∞u'}
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="pt-16 p-6">
        <div className="mb-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-1">{formData.fullName || 'T√™n ch∆∞a c·∫≠p nh·∫≠t'}</h2>
          <p className="text-gray-600 mb-2">{apiProfileData?.role || 'USER'}</p>
          <div className="flex items-center text-sm text-green-600 bg-green-50 px-2 py-1 rounded-full w-fit">
            <span className="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
            ƒêANG T√åM VI·ªÜC
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">H·ªç v√† t√™n</label>
            {isEditing ? (
              <input
                type="text"
                value={formData.fullName}
                onChange={(e) => handleInputChange('fullName', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
              />
            ) : (
              <p className="text-gray-900">{formData.fullName || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
            <p className="text-gray-900">{formData.email}</p>
            <p className="text-xs text-gray-500">Email kh√¥ng th·ªÉ thay ƒë·ªïi</p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">S·ªë ƒëi·ªán tho·∫°i</label>
            {isEditing ? (
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => handleInputChange('phone', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
              />
            ) : (
              <p className="text-gray-900">{formData.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Ng√†y sinh</label>
            {isEditing ? (
              <input
                type="date"
                value={formData.dateOfBirth}
                onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
              />
            ) : (
              <p className="text-gray-900">
                {formData.dateOfBirth ? 
                  new Date(formData.dateOfBirth).toLocaleDateString('vi-VN') : 
                  'Ch∆∞a c·∫≠p nh·∫≠t'
                }
              </p>
            )}
          </div>

          <div className="md:col-span-2">
            <label className="block text-sm font-medium text-gray-700 mb-2">ƒê·ªãa ch·ªâ</label>
            {isEditing ? (
              <input
                type="text"
                value={formData.address}
                onChange={(e) => handleInputChange('address', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:border-blue-500"
              />
            ) : (
              <p className="text-gray-900">{formData.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderContactInfo = () => (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Th√™m th√¥ng tin chi ti·∫øt</h3>
      
      <div className="space-y-4">
        <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
            </div>
            <div>
              <p className="font-medium text-gray-900">Email</p>
              <p className="text-gray-600">{formData.email}</p>
            </div>
          </div>
          <button className="text-blue-600 hover:text-blue-700">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
        </div>

        <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
            </div>
            <div>
              <p className="font-medium text-gray-900">S·ªë ƒëi·ªán tho·∫°i</p>
              <p className="text-gray-600">{formData.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            </div>
          </div>
          <button className="text-blue-600 hover:text-blue-700">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
        </div>

        <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
              <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </div>
            <div>
              <p className="font-medium text-gray-900">ƒê·ªãa ch·ªâ</p>
              <p className="text-gray-600">{formData.address || 'Ch∆∞a c·∫≠p nh·∫≠t'}</p>
            </div>
          </div>
          <button className="text-blue-600 hover:text-blue-700">
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );

  const renderAbout = () => (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">Gi·ªõi thi·ªáu b·∫£n th√¢n</h3>
        <button className="text-blue-600 hover:text-blue-700 flex items-center space-x-1">
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span>Th√™m</span>
        </button>
      </div>
      
      <div className="text-center py-12">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
        </div>
        <p className="text-gray-500 mb-4">T√¥i l√† m·ªôt nh√† thi·∫øt k·∫ø s·∫£n ph·∫©m - nh√† l√†m phim hi·ªán ƒëang l√†m vi·ªác t·ª± do t·∫°i Twitter t·ª´ th√†nh ph·ªë Manchester qu·ªëc Anh. T√¥i ƒëam m√™ thi·∫øt k·∫ø s·∫£n ph·∫©m UI/UX v√† k·ªπ thu·∫≠t s·ªë c√≥ t√°c ƒë·ªông t√≠ch c·ª±c ƒë·∫øn th·∫ø gi·ªõi.</p>
        <p className="text-gray-500">Trong 10 nƒÉm, t√¥i chuy√™n v·ªÅ thi·∫øt k·∫ø giao di·ªán, tr·∫£i nghi·ªám v√† t∆∞∆°ng t√°c c√πng nh∆∞ l√†m vi·ªác trong ngh√†nh c·ªßa nh·ªØng d√πng v√† chi·∫øn l∆∞·ª£c s·∫£n ph·∫©m trong c√°c c√¥ng ty c√¥ng ngh·ªá t·ªët v√† c√¥ng ty kh·ªüi nghi·ªáp.</p>
      </div>
    </div>
  );

  const renderPlaceholder = (title: string) => (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <button className="text-blue-600 hover:text-blue-700 flex items-center space-x-1">
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span>Th√™m</span>
        </button>
      </div>
      
      <div className="text-center py-12">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
        </div>
        <p className="text-gray-500">Ch∆∞a c√≥ th√¥ng tin {title.toLowerCase()}</p>
        <button className="mt-4 text-blue-600 hover:text-blue-700">
          Th√™m {title.toLowerCase()} ƒë·∫ßu ti√™n
        </button>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'personal':
        return renderPersonalInfo();
      case 'contact':
        return renderContactInfo();
      case 'about':
        return renderAbout();
      case 'experience':
        return renderPlaceholder('Kinh nghi·ªám');
      case 'education':
        return renderPlaceholder('H·ªçc v·∫•n');
      case 'skills':
        return renderPlaceholder('K·ªπ nƒÉng');
      case 'languages':
        return renderPlaceholder('Ng√¥n ng·ªØ');
      default:
        return renderPersonalInfo();
    }
  };

  // Show loading spinner
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-96">
        <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
        <span className="ml-3 text-gray-600">ƒêang t·∫£i th√¥ng tin profile...</span>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="flex gap-8">
        {/* Sidebar */}
        <div className="w-64 flex-shrink-0">
          <div className="bg-white rounded-lg shadow-sm">
            <div className="p-6 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">Trang c√° nh√¢n</h2>
              <p className="text-sm text-gray-600">Qu·∫£n l√Ω th√¥ng tin h·ªì s∆° v√† CV c·ªßa b·∫°n</p>
            </div>
            
            <nav className="p-4">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${
                    activeTab === tab.id
                      ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                      : 'text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  <span className="text-lg">{tab.icon}</span>
                  <span className="font-medium">{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1">
          {/* Error Message */}
          {error && (
            <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
              <div className="flex">
                <svg className="w-5 h-5 text-red-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.08 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <p className="text-red-800">{error}</p>
              </div>
            </div>
          )}

          {/* Success Message */}
          {successMessage && (
            <div className="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex">
                <svg className="w-5 h-5 text-green-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                <p className="text-green-800">{successMessage}</p>
              </div>
            </div>
          )}

          {/* Content */}
          {renderContent()}
        </div>
      </div>
    </div>
  );
};

export default Profile;